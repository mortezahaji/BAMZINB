######################################################################################################
######################################################################################################
#### JAGS model file written by runjags version 2.2.0-3 on 2022-05-03 13:43:28 
######################################################################################################
######################################################################################################

### Model template as follows - ensure this is syntactically correct before running the model!

model{

# In the BUGS/JAGS language we must use an explicit for loop:
for(i in 1:N){
	# These lines describe the response distribution and linear model terms:
	Count[i] ~ dpois(regression_fitted[i])
	regression_residual[i] <- Count[i] - regression_fitted[i]
	dispersion[i] ~ dgamma(k, k)
	regression_fitted[i] <- regression_mean[i] * dispersion[i] * non_zero_group[i]
	# Note: this formulation of a gamma-Poisson is exactly equivalent to a Negative Binomial
	log(regression_mean[i]) <- intercept + Age_Taxa_effect[Age[i],Taxa[i]] + ID_randomeffect[ID[i]] + log(Tot[i]) 
	non_zero_group[i] ~ dbern(non_zero_prob[i])
	logit(non_zero_prob[i]) <- -(zero_inflation_intercept)
		# Note: this line (inside the parentheses) could specify a separate linear regression
		# To make this the probability of zero-inflation, the - symbol is required!
}

# These lines give the prior distributions for the parameters to be estimated:
k ~ dgamma(0.001, 0.001)
	# Note: the prior for the diserpsion parameter k is quite important for convergence
	# [A DuMouchel prior may be better than a Gamma prior]
intercept ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,1]  <- 0
Age_Taxa_effect[2,1]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,2]  <- 0
Age_Taxa_effect[2,2]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,3]  <- 0
Age_Taxa_effect[2,3]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,4]  <- 0
Age_Taxa_effect[2,4]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,5]  <- 0
Age_Taxa_effect[2,5]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,6]  <- 0
Age_Taxa_effect[2,6]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,7]  <- 0
Age_Taxa_effect[2,7]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,8]  <- 0
Age_Taxa_effect[2,8]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,9]  <- 0
Age_Taxa_effect[2,9]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,10]  <- 0
Age_Taxa_effect[2,10]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,11]  <- 0
Age_Taxa_effect[2,11]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,12]  <- 0
Age_Taxa_effect[2,12]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,13]  <- 0
Age_Taxa_effect[2,13]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,14]  <- 0
Age_Taxa_effect[2,14]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,15]  <- 0
Age_Taxa_effect[2,15]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,16]  <- 0
Age_Taxa_effect[2,16]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,17]  <- 0
Age_Taxa_effect[2,17]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,18]  <- 0
Age_Taxa_effect[2,18]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,19]  <- 0
Age_Taxa_effect[2,19]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,20]  <- 0
Age_Taxa_effect[2,20]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,21]  <- 0
Age_Taxa_effect[2,21]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,22]  <- 0
Age_Taxa_effect[2,22]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,23]  <- 0
Age_Taxa_effect[2,23]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,24]  <- 0
Age_Taxa_effect[2,24]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,25]  <- 0
Age_Taxa_effect[2,25]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,26]  <- 0
Age_Taxa_effect[2,26]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,27]  <- 0
Age_Taxa_effect[2,27]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,28]  <- 0
Age_Taxa_effect[2,28]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,29]  <- 0
Age_Taxa_effect[2,29]  ~ dnorm(0, 10^-6)
Age_Taxa_effect[1,30]  <- 0
Age_Taxa_effect[2,30]  ~ dnorm(0, 10^-6)

for(ID_iterator in 1:236){
	ID_randomeffect[ID_iterator] ~ dnorm(0, ID_precision)
}
ID_precision ~ dgamma(0.001, 0.001)
zero_inflation_intercept ~ dnorm(0, 10^-6)
non_zero_propotion <- ilogit(-zero_inflation_intercept)
resid.sum.sq <- sum(regression_residual^2)
}